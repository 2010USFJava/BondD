package com.revature.implementation;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.revature.DAOInterface.AccountInterface;
import com.revature.model.Account;
import com.revature.model.Customer;
import com.revature.utility.BankLogger;
import com.revature.utility.DataPersistenceUtility;

public class AccountImp implements AccountInterface{
	public AccountImp() {
		
	}
	
	private static ArrayList<Account> accountList = new ArrayList<>();
    
	
	
	//fill account list from DB
	
	public List<Account> fillAccountList(){
		accountList.clear();
		
		
		String sql= "select account_id, balance, is_deactivated, is_pending from project0.account";
		
		try {
			int id;
			double bal;
			boolean pending, notActive;
			ResultSet rs = DataPersistenceUtility.getResultSet(sql);
			while (rs.next()) {
			id= rs.getInt("account_id");
			bal= rs.getDouble("balance");
			pending = rs.getBoolean("is_pending");
			notActive= rs.getBoolean("is_deactivated");
					
						//select where statement
			//create new account 
			Account a = new Account (id,bal,pending,notActive);
			accountList.add(a);
				
			
			
			}
			
		} catch (SQLException e) {
			System.out.println("check fillAccountList SQL.");
			e.printStackTrace();
		}
		
		
		
		return accountList;
		
	}
	//get Account list from file
	public static List<Account> getAccountList(){

		return accountList;
	}
	
	


	// update Accounts
	public static void setAccountList(List<Account> acctList) {
		AccountImp.accountList = (ArrayList<Account>) acctList;
	}

	public static int assignAccountNumber() {
		 int id =0;
        List<Integer> tempList = new ArrayList<>();
        //make sorted list of IDs
       getAccountList().forEach((acct) -> {
       	tempList.add(acct.getAccountID());
       	
       }); 
       Collections.sort(tempList); 
             
      
      //set first ID
       if (tempList.get(0)!=10000){
           id = 10000;
           System.out.println(id);
           return id;
       } else{ //set to next available ID
        id = tempList.size()+10000;
       
      return id;
       }
	}
       
	
	
	
	/*public static boolean accountLookUp(int accountNum, String accountHolder){
		for (Account account : accountList) {
			int aNum = account.getAccountID();
			
			
			if (aNum== accountNum){
				for (String name : nameList) {
					
					if (name.equalsIgnoreCase(accountHolder)) {
						return true;
					}
				}
			}
		}
		
		return false;
		
		
		
	}
	*/
	
	public static Account accountLookUpByNum(int accountNum) {
	  for(Account account : accountList)
		  if (account.getAccountID() == accountNum) {
			  return account;
		  }
	  
		
		
		return null;
	
	}


	public static void deposit(double amt, Account acct) {
		Account account = acct ;
		double amount = amt;
		double newBalance = account.getBalance() + amount;
		account.setBalance(newBalance);
		//DataPersistenceUtility.writeUtility(AccountImp.getAccountList(), DataPersistenceUtility.getAccountfile());
		System.out.println("Your new balance is " + account.getBalance());
		BankLogger.LogIt("info", "Deposit in the amount of " +amt+ " to " +acct.getAccountID()+ "was successful."); 
	}


	public static void withdrawal(double amt, Account acct) {
		Account account = acct ;
		double amount = amt;
		double newBalance = account.getBalance() - amount;
		account.setBalance(newBalance);
		//DataPersistenceUtility.writeUtility(AccountImp.getAccountList(), DataPersistenceUtility.getAccountfile());
		System.out.println("Your new balance is " + account.getBalance());
		BankLogger.LogIt("info","Withdrawal of " +amt+ " from " +acct.getAccountID()+" was successful.");
	}


	public static void transferFunds(double amt, Account from, int to) {
		double amount = amt;
		Account fromAccount = from;
		Account toAccount= accountLookUpByNum(to);
		if (toAccount != null) {
			double newBalance1= fromAccount.getBalance()-amount;
			double newBalance2 = toAccount.getBalance() + amount;
		fromAccount.setBalance(newBalance1);
		toAccount.setBalance(newBalance2);
		//DataPersistenceUtility.writeUtility(AccountImp.getAccountList(), DataPersistenceUtility.getAccountfile());
		System.out.println("Your new balance in  " +toAccount.getAccountID() + " is "+ toAccount.getBalance());
		System.out.println("Your new balance in  " + fromAccount.getAccountID()+ " is " +  fromAccount.getBalance());
		BankLogger.LogIt("info", "Transfer from " +fromAccount.getAccountID()+" to "+toAccount.getAccountID()+ " in the amount of " +amt+"was successful.");
	}
	}


	/* public static void addAccountHolder(Account acct, Customer cx) {
		Account account = acct;
		String acctHolder = cx.getUserName();
		account.getAccountHolders().add(acctHolder);
		//DataPersistenceUtility.writeUtility(AccountImp.getAccountList(), DataPersistenceUtility.getAccountfile());
		System.out.println("Account Holders have been updated: " + account.getAccountHolders());
		BankLogger.LogIt("info", "Account Holders have been updated: " + account.getAccountHolders());
	}
	*/

	public static void approvePendingAccount(Account acct) {
		Account account = acct;
		account.setPending(false);
		account.setDeactivated(false);
		
		//DataPersistenceUtility.writeUtility(AccountImp.getAccountList(), DataPersistenceUtility.getAccountfile());
		System.out.println("Account " +account.getAccountID()+ " is active and no longer pending!");
		BankLogger.LogIt("info", "Account " +account.getAccountID()+ " has been approved." );
		
	}


	@Override
	public List<Account> addNewAccount(Account a)  {
		String sql = "insert into account (balance, is_deactivated,is_pending) values (?, false, true)";
		
				try {
					PreparedStatement stmnt = DataPersistenceUtility.makePrStmnt(sql);
					stmnt.setDouble(1, a.getBalance());
					stmnt.executeUpdate();
					
					fillAccountList();
					
				} catch(SQLException e) {
					System.out.println(" Check addNewAccount SQL");
					e.printStackTrace();
				}
				return accountList;		
	}


	@Override
	public List<Account> updateAccount(Account a)  {
		String sql = "UPDATE account SET balance = ?, is_deactivated = ?,"
				+ " is_pending= ? WHERE account_id =?";
		
		 try {
			PreparedStatement stmnt = DataPersistenceUtility.makePrStmnt(sql);
			 stmnt.setDouble(1,	a.getBalance());
			 stmnt.setBoolean(2, a.isDeactivated());
			 stmnt.setBoolean(3, a.isPending());
			 stmnt.setInt(4,a.getAccountID());
			 stmnt.executeUpdate();
			 
			 fillAccountList();
		} catch (SQLException e) {
			System.out.println("Check updateAccount SQL.");
			e.printStackTrace();
		}		
		
		return accountList;
	}


	@Override
	public List<Account> deleteAccount(Account a) throws SQLException {
		
		return accountList;
	}


	


}