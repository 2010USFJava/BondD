package com.revature.implementation;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.revature.DAOInterface.AccountInterface;
import com.revature.model.Account;
import com.revature.utility.BankLogger;
import com.revature.utility.DataPersistenceUtility;

public class AccountImp implements AccountInterface{
	public AccountImp() {
		
	}
	
	private ArrayList<Account> accountList = new ArrayList<>();
    
	
	
	//fill account list from DB
	
	public List<Account> fillAccountList(){
		accountList.clear();
		
		
		String sql= "select account_id, balance, is_deactivated, is_pending from project0.account";
		
		try {
			int id;
			double bal;
			boolean pending, notActive;
			//list to hold account holders 
			
			ResultSet rs = DataPersistenceUtility.getResultSet(sql);
			while (rs.next()) {
			id= rs.getInt("account_id");
			bal= rs.getDouble("balance");
			pending = rs.getBoolean("is_pending");
			notActive= rs.getBoolean("is_deactivated");
					
						//select where statement
			//create new account 
			Account a = new Account (id,bal,pending,notActive);
			//add new account to the list 
			getAccountList().add(a);
			
			   }
			
			
			return accountList;
			
		} catch (SQLException e) {
			System.out.println("Check accountList SQL"  +e.getSQLState() + e.getMessage());
			e.printStackTrace();
		}
		return accountList;
		
	}	
		
		
		
	
	//get Account list from file
	public  List<Account> getAccountList(){

		return accountList;
	}
	
	


	// update Accounts
	public  void setAccountList(List<Account> acctList) {
		accountList = (ArrayList<Account>) acctList;
	}

	
	
	
	
	public  boolean accountLookUp(int accountNum, String accountHolder){		
		for (Account account : accountList) {
			int aNum = account.getAccountID();
			
				}
		
		return false;
		
	}
	public  Account accountLookUpByNum(int accountNum) {
	  for(Account account : accountList)
		  if (account.getAccountID() == accountNum) {
			  return account;
		  }
	  
		
		
		return null;
	
	}


	public  void deposit(double amt, Account acct) {
		Account account = acct ;
		double amount = amt;
		double newBalance = account.getBalance() + amount;
		account.setBalance(newBalance);
		System.out.println("Your new balance is " + account.getBalance());
		BankLogger.LogIt("info", "Deposit in the amount of " +amt+ " to " +acct.getAccountID()+ "was successful."); 
	}


	public void withdrawal(double amt, Account acct) {
		Account account = acct ;
		double amount = amt;
		double newBalance = account.getBalance() - amount;
		account.setBalance(newBalance);
		System.out.println("Your new balance is " + account.getBalance());
		BankLogger.LogIt("info","Withdrawal of " +amt+ " from " +acct.getAccountID()+" was successful.");
	}


	

	


	public  void approvePendingAccount(Account acct) {
		Account account = acct;
		account.setPending(false);
		account.setDeactivated(false);
		
		System.out.println("Account " +account.getAccountID()+ " is active and no longer pending!");
		BankLogger.LogIt("info", "Account " +account.getAccountID()+ " has been approved." );
		
	}


	@Override
	public void createNewAccount(Account a) {
		String sql = "Insert into  (fist_name,) values (?)"	
				try {
					PreparedStatement stmnt = makePrStmnt(sql);
					stmnt.setString(1, a.getfName());
					
					
					stmnt.executeUpdate();
					
					fillAccountList();
					
				}catch(SQLException sqe){
			          System.out.println("Check Customer Insert SQL " + sqe.getSQLState() + sqe.getMessage());
			        } catch (Exception e) {
			            System.out.println("Error:" +e.getMessage());
			         }
		
	}


	@Override
	public void updateAccount(Account a) {
		
		
	}


	@Override
	public void deactivateAccount(Account a) {
		
	}


	
	}


	


